<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="K-lib" label="K-lib">
    <memberTool name="delayload"/>
    <memberTool name="alembic_extract"/>
    <memberTool name="add2force"/>
    <memberTool name="Add2Matte"/>
    <memberTool name="merge vdb"/>
    <memberTool name="merge"/>
    <memberTool name="wrangle"/>
    <memberTool name="null"/>
    <memberTool name="xform"/>
    <memberTool name="Hip-Increment-Save"/>
    <memberTool name="BG_color"/>
    <memberTool name="tool_5"/>
    <memberTool name="set_var"/>
  </toolshelf>

  <tool name="Hip-Increment-Save" label="HIP+_Inc" icon="SOP_file">
    <script scriptType="python"><![CDATA[import os, re

def hipIncrementVersion():
    # SETTINGS ==================
    setToFirstFrame = True # Sets playback frame of saved file to first frame (does not affect open file)
    setToManualUpdate = False # Sets update mode of saved file to manual (does not affect open file)
    autoversion = True # If no versioning exists, create a new version
    autoversionzfill = 3 # digit padding for autoversioning
    debug = 0 # print some items to console
    # ===========================

    orighip = hou.hipFile.name()
    hipname = hou.hipFile.basename()
    hipfile = hipname.split(".")[0]

    # check current filename for version prefix and split accordingly
    # Uses regex so a filename like myfile_verycool_v001.hip will get picked up correctly (not match the first _v)
    versionSections = ""
    versionType = ""
    if len(re.findall('_v(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_v(?=\d+)', hipfile, 1)        
        versionType = "_v"
    elif len(re.findall('_V(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_V(?=\d+)', hipfile, 1)          
        versionType = "_V"
        

    # if no version prefix found, create it
    if versionSections == "":
        if(autoversion):
            versionSections = [hipfile, "0"*autoversionzfill]
            versionType = "_v"
            orighip = orighip.replace(hipfile, hipfile + versionType + "0"*autoversionzfill)
            print "No version found in hip name - Autoversioning"
        else:
            print "No version found in hip name - Exiting"
            return 1

    # regex - match numbers after version splitter. Match until non-numeric value is hit.  
    match = re.match('\d+', versionSections[1])    
    if match:
        versionNumber = match.group(0)
    else:
        print "Problem encountered matching version number - Exiting"
        return 1
    
    # Create new filename
    oldVersion = versionType + versionNumber
    if debug:
        print "Old version: " + oldVersion
    newVersion = versionType + str(int(versionNumber) + 1).zfill(len(versionNumber))
    newhip = orighip.replace(oldVersion, newVersion)
    if debug:    
        print "New file: " + newhip

    # Save the file
    confirm = 0
    if os.path.isfile(newhip) :
        text = "Overwrite existing hip file?"
        confirm = hou.ui.displayMessage(text, buttons=("Yes", "No"), severity=hou.severityType.Message, title="New Hip")
    if confirm == 0 :
        # update mode and frame settings
        updateMode = hou.updateModeSetting()
        frame = hou.frame()
        if (setToManualUpdate):
            hou.setUpdateMode(hou.updateMode.Manual)
        if (setToFirstFrame):
            # hou.setFrame(1)
            hou.setFrame(hou.playbar.playbackRange()[0])

        hou.hipFile.save(newhip)
        
        # reset update mode and frame
        hou.setUpdateMode(updateMode)
        hou.setFrame(frame)

hipIncrementVersion()]]></script>
    <keywordList>
      <keyword>K-Lib</keyword>
    </keywordList>
  </tool>

  <tool name="xform" label="Transform (T)" icon="SOP_xform">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    node = hou.selectedNodes()[0]
    if(node.type().category() == hou.sopNodeTypeCategory()):
        parent = node.parent()
        trans = parent.createNode("xform")
        trans.setName('transform_',1)
        trans.setNextInput(node)
        trans.moveToGoodPosition(True, False, True, True) 
        trans.setSelected(True, True, False)  
            ]]></script>
  </tool>

  <tool name="null" label="Null (N)" icon="SOP_null">
    <script scriptType="python"><![CDATA[selected_nodes = hou.selectedNodes()
for node in selected_nodes:
    parent = node.parent()
    name_node_selected = node.name()
    null = parent.createNode('null','OUT_' +
        name_node_selected)
    null.setInput(0,node)
    macolo = hou.Color((0,0.5,0))
    null.setColor(macolo)
    pos = node.position()
    null.setPosition(pos)
    null.move([0,-1])
    #flags
    null.setSelected(True,True)
    null.setDisplayFlag(True)
    null.setRenderFlag(True)]]></script>
  </tool>

  <tool name="wrangle" label="Wrangle (W)" icon="SOP_attribwrangle">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    node = hou.selectedNodes()[0]
    if(node.type().category() == hou.sopNodeTypeCategory()):
        parent = node.parent()
        wrangle = parent.createNode("attribwrangle")
        wrangle.setNextInput(node)
        wrangle.moveToGoodPosition(True, False, True, True) 
        wrangle.setSelected(True, True, False)  
        wrangle.setCurrent(True, True)
       ]]></script>
  </tool>

  <tool name="merge" label="Merge (M)" icon="SOP_merge">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    nodes = hou.selectedNodes()
    parent = nodes[0].parent()
    merge = parent.createNode("merge")
    
    for node in hou.selectedNodes():
        if(node.type().category() == hou.sopNodeTypeCategory()):
            merge.setNextInput(node)
        
    merge.moveToGoodPosition(True, False, True, True) 
    merge.setSelected(True, True, False)   
    #merge.setDisplayFlag(True)]]></script>
  </tool>

  <tool name="delayload" label="Delay Load" icon="SOP_attribcomposite">
    <script scriptType="python"><![CDATA[#function for node variable: return type, description and name
def extract_getTypeName(node):
    nodetype = node.type()
    description = nodetype.description()
    type_name = nodetype.name() 
    return type_name
    
#show selection tuple names
selection = hou.selectedNodes()
print len(selection)
my_list = ""
if len(selection) < 1 :
    my_list = "nothing selected, please select at least one object"
else:
    a=1
    for sel in selection:
        my_list = "selected object : " + sel.name()
        a=a+1        
hou.ui.displayMessage(my_list, buttons=('OK',))

#for each object in selection
lenght = len(selection)
print "DONE!"
for i in range(lenght):

#create python variable for selected node
    selected = hou.selectedNodes()[i]
    if selected:
       meshop=hou.node('/shop');
       meshop=meshop.createNode('vm_geo_file');
       meshop.setName('delayed_load_shop_1', 1)
       targetdshop=meshop.path();
       meobj=hou.node('/obj')
       meobj=meobj.createNode("geo");
       meobj.setParms({"shop_geometrypath":targetdshop});
       meobj.setName('DELAYED_load_geo_1', 1)
       targetfile=selected.parm('file') or selected.parm('sopoutput') 
       mefile=meobj.node('file1')
       meobj.parm("geo_velocityblur").set(1)
       meobj.parm("vm_forcegeometry").set(0)
       meshop.parm("file").set(targetfile)              ]]></script>
  </tool>

  <tool name="hip" label="HIP" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os

       xdg-open $HIP]]></script>
  </tool>

  <tool name="job" label="JOB" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[kfmclient exec '$JOB']]></script>
  </tool>
</shelfDocument>
