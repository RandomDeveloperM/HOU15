<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="K-lib" label="K-lib">
    <memberTool name="scene_setup"/>
    <memberTool name="setup_variables"/>
    <memberTool name="alembic_extract"/>
    <memberTool name="delayload"/>
    <memberTool name="select_type"/>
    <memberTool name="hip_comment"/>
    <memberTool name="add2force"/>
    <memberTool name="Add2Matte"/>
    <memberTool name="merge vdb"/>
    <memberTool name="merge"/>
    <memberTool name="wrangle"/>
    <memberTool name="null"/>
    <memberTool name="xform"/>
    <memberTool name="BG_color"/>
    <memberTool name="Open_renders"/>
    <memberTool name="cache0"/>
    <memberTool name="hip0"/>
    <memberTool name="flipbook"/>
  </toolshelf>

  <tool name="xform" label="Transform (T)" icon="SOP_xform">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    node = hou.selectedNodes()[0]
    if(node.type().category() == hou.sopNodeTypeCategory()):
        parent = node.parent()
        trans = parent.createNode("xform")
        trans.setName('transform_',1)
        trans.setNextInput(node)
        trans.moveToGoodPosition(True, False, True, True) 
        trans.setSelected(True, True, False)  
            ]]></script>
  </tool>

  <tool name="null" label="Null (N)" icon="SOP_null">
    <script scriptType="python"><![CDATA[selected_nodes = hou.selectedNodes()
for node in selected_nodes:
    parent = node.parent()
    name_node_selected = node.name()
    null = parent.createNode('null','OUT_' +
        name_node_selected)
    null.setInput(0,node)
    macolo = hou.Color((0,0.5,0))
    null.setColor(macolo)
    pos = node.position()
    null.setPosition(pos)
    null.move([0,-1])
    #flags
    null.setSelected(True,True)
    null.setDisplayFlag(True)
    null.setRenderFlag(True)]]></script>
  </tool>

  <tool name="wrangle" label="Wrangle (W)" icon="SOP_attribwrangle">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    node = hou.selectedNodes()[0]
    if(node.type().category() == hou.sopNodeTypeCategory()):
        parent = node.parent()
        wrangle = parent.createNode("attribwrangle")
        wrangle.setNextInput(node)
        wrangle.moveToGoodPosition(True, False, True, True) 
        wrangle.setSelected(True, True, False)  
        wrangle.setCurrent(True, True)
       ]]></script>
  </tool>

  <tool name="merge" label="Merge (M)" icon="SOP_merge">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    nodes = hou.selectedNodes()
    parent = nodes[0].parent()
    merge = parent.createNode("merge")
    
    for node in hou.selectedNodes():
        if(node.type().category() == hou.sopNodeTypeCategory()):
            merge.setNextInput(node)
        
    merge.moveToGoodPosition(True, False, True, True) 
    merge.setSelected(True, True, False)   
    #merge.setDisplayFlag(True)]]></script>
  </tool>

  <tool name="delayload" label="Delay Load" icon="SOP_attribcomposite">
    <script scriptType="python"><![CDATA[#Delayed_load_script_by Kishen PJ     |
#v2.1 on 14_Nov_2017 for HoudiniFX    |
#Please share                      |
#kishenpj@gmail.com                   |
#--------------------------------------

#function for node variable: return type, description and name
def extract_getTypeName(node):
    nodetype = node.type()
    description = nodetype.description()
    type_name = nodetype.name() 
    return type_name
    
#show selection tuple names
selection = hou.selectedNodes()
print len(selection) 
print "Selected nodes"
my_list = ""
if len(selection) < 1 :
    my_list = "nothing selected, please select at least one object"
else:
    a=1
    for sel in selection:
        my_list = "selected object : " + sel.name()
        a=a+1        
hou.ui.displayMessage(my_list, buttons=('OK',))

#for each object in selection
lenght = len(selection)
for i in range(lenght):

#create python variable for selected node
    selected = hou.selectedNodes()[i]
    nodename = selected.name()
    print nodename
    print "DONE!"
    if selected:
       meshop=hou.node('/shop');
       meshop=meshop.createNode('vm_geo_file');
       meshop.setName('delayed_load_shop_' + nodename)
       meshop.setColor(hou.Color((0,0,0)))
       targetdshop=meshop.path();
       meobj=hou.node('/obj')
       meobj=meobj.createNode("geo");
       meobj.setParms({"shop_geometrypath":targetdshop});
       meobj.setName('DELAYED_load_' + nodename)
       meobj.setColor(hou.Color((0,0,0)))
       targetfile=selected.parm('file') or selected.parm('sopoutput') 
       mefile=meobj.node('file1')
       mefile.setName('Check_' + nodename)
       mefile.setColor(hou.Color((0,0.333,0)))
       mefile.parm("file").set(targetfile)
       mefile.parm("loadtype").set('delayed')
       meobj.parm("geo_velocityblur").set(1)
       meobj.parm("vm_forcegeometry").set(0)
       meshop.parm("file").set(targetfile)]]></script>
  </tool>

  <tool name="job" label="JOB" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[kfmclient exec '$JOB']]></script>
  </tool>
</shelfDocument>
